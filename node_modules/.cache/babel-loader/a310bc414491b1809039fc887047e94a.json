{"ast":null,"code":"(function () {\n  'use strict'; // desiredOffset - page offset to scroll to\n  // speed - duration of the scroll per 1000px\n\n  function __ANIMATE_SCROLL_TO(desiredOffset) {\n    var userOptions = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n    var options = {\n      speed: 500,\n      minDuration: 250,\n      maxDuration: 1500,\n      cancelOnUserAction: true,\n      element: window,\n      horizontal: false,\n      onComplete: undefined,\n      passive: true,\n      offset: 0\n    };\n    var optionsKeys = Object.keys(options); // Override default options\n\n    for (var i = 0; i < optionsKeys.length; i++) {\n      var key = optionsKeys[i];\n\n      if (typeof userOptions[key] !== 'undefined') {\n        options[key] = userOptions[key];\n      }\n    }\n\n    if (!options.cancelOnUserAction && options.passive) {\n      options.passive = false;\n\n      if (userOptions.passive) {\n        console && console.warn('animated-scroll-to:\\n \"passive\" was set to \"false\" to prevent errors, ' + 'as using \"cancelOnUserAction: false\" doesn\\'t work with passive events.');\n      }\n    }\n\n    if (desiredOffset instanceof HTMLElement) {\n      if (userOptions.element && userOptions.element instanceof HTMLElement) {\n        if (options.horizontal) {\n          desiredOffset = desiredOffset.getBoundingClientRect().left + userOptions.element.scrollLeft - userOptions.element.getBoundingClientRect().left;\n        } else {\n          desiredOffset = desiredOffset.getBoundingClientRect().top + userOptions.element.scrollTop - userOptions.element.getBoundingClientRect().top;\n        }\n      } else if (options.horizontal) {\n        var scrollLeft = window.scrollX || document.documentElement.scrollLeft;\n        desiredOffset = scrollLeft + desiredOffset.getBoundingClientRect().left;\n      } else {\n        var scrollTop = window.scrollY || document.documentElement.scrollTop;\n        desiredOffset = scrollTop + desiredOffset.getBoundingClientRect().top;\n      }\n    } // Add additonal user offset\n\n\n    desiredOffset += options.offset;\n    options.isWindow = options.element === window;\n    var initialScrollPosition = null;\n    var initialAxisScollPosition = 0;\n    var maxScroll = null;\n\n    if (options.isWindow) {\n      if (options.horizontal) {\n        // get cross browser scroll positions\n        initialScrollPosition = window.scrollX || document.documentElement.scrollLeft;\n        initialAxisScollPosition = window.scrollY || document.documentElement.scrollTop; // cross browser document height minus window height\n\n        maxScroll = Math.max(document.body.scrollWidth, document.documentElement.scrollWidth, document.body.offsetWidth, document.documentElement.offsetWidth, document.body.clientWidth, document.documentElement.clientWidth) - window.innerWidth;\n      } else {\n        // get cross browser scroll positions\n        initialScrollPosition = window.scrollY || document.documentElement.scrollTop;\n        initialAxisScollPosition = window.scrollX || document.documentElement.scrollLeft; // cross browser document width minus window width\n\n        maxScroll = Math.max(document.body.scrollHeight, document.documentElement.scrollHeight, document.body.offsetHeight, document.documentElement.offsetHeight, document.body.clientHeight, document.documentElement.clientHeight) - window.innerHeight;\n      }\n    } else {\n      // DOM element\n      if (options.horizontal) {\n        initialScrollPosition = options.element.scrollLeft;\n        maxScroll = options.element.scrollWidth - options.element.clientWidth;\n      } else {\n        initialScrollPosition = options.element.scrollTop;\n        maxScroll = options.element.scrollHeight - options.element.clientHeight;\n      }\n    } // If the scroll position is greater than maximum available scroll\n\n\n    if (desiredOffset > maxScroll) {\n      desiredOffset = maxScroll;\n    } // Calculate diff to scroll\n\n\n    var diff = desiredOffset - initialScrollPosition; // Do nothing if the page is already there\n\n    if (diff === 0) {\n      // Execute callback if there is any\n      if (options.onComplete && typeof options.onComplete === 'function') {\n        options.onComplete();\n      }\n\n      return;\n    } // Calculate duration of the scroll\n\n\n    var duration = Math.abs(Math.round(diff / 1000 * options.speed)); // Set minimum and maximum duration\n\n    if (duration < options.minDuration) {\n      duration = options.minDuration;\n    } else if (duration > options.maxDuration) {\n      duration = options.maxDuration;\n    }\n\n    var startingTime = Date.now(); // Request animation frame ID\n\n    var requestID = null; // Method handler\n\n    var handleUserEvent = null;\n    var userEventOptions = {\n      passive: options.passive\n    };\n\n    if (options.cancelOnUserAction) {\n      // Set handler to cancel scroll on user action\n      handleUserEvent = function () {\n        removeListeners();\n        cancelAnimationFrame(requestID);\n      };\n\n      window.addEventListener('keydown', handleUserEvent, userEventOptions);\n      window.addEventListener('mousedown', handleUserEvent, userEventOptions);\n    } else {\n      // Set handler to prevent user actions while scroll is active\n      handleUserEvent = function (e) {\n        e.preventDefault();\n      };\n\n      window.addEventListener('scroll', handleUserEvent, userEventOptions);\n    }\n\n    window.addEventListener('wheel', handleUserEvent, userEventOptions);\n    window.addEventListener('touchstart', handleUserEvent, userEventOptions);\n\n    var removeListeners = function () {\n      window.removeEventListener('wheel', handleUserEvent, userEventOptions);\n      window.removeEventListener('touchstart', handleUserEvent, userEventOptions);\n\n      if (options.cancelOnUserAction) {\n        window.removeEventListener('keydown', handleUserEvent, userEventOptions);\n        window.removeEventListener('mousedown', handleUserEvent, userEventOptions);\n      } else {\n        window.removeEventListener('scroll', handleUserEvent, userEventOptions);\n      }\n    };\n\n    var step = function () {\n      var timeDiff = Date.now() - startingTime;\n      var t = timeDiff / duration - 1;\n      var easing = t * t * t + 1;\n      var scrollPosition = Math.round(initialScrollPosition + diff * easing);\n\n      var doScroll = function (position) {\n        if (options.isWindow) {\n          if (options.horizontal) {\n            options.element.scrollTo(position, initialAxisScollPosition);\n          } else {\n            options.element.scrollTo(initialAxisScollPosition, position);\n          }\n        } else if (options.horizontal) {\n          options.element.scrollLeft = position;\n        } else {\n          options.element.scrollTop = position;\n        }\n      };\n\n      if (timeDiff < duration && scrollPosition !== desiredOffset) {\n        // If scroll didn't reach desired offset or time is not elapsed\n        // Scroll to a new position\n        // And request a new step\n        doScroll(scrollPosition);\n        requestID = requestAnimationFrame(step);\n      } else {\n        // If the time elapsed or we reached the desired offset\n        // Set scroll to the desired offset (when rounding made it to be off a pixel or two)\n        // Clear animation frame to be sure\n        doScroll(desiredOffset);\n        cancelAnimationFrame(requestID); // Remove listeners\n\n        removeListeners(); // Animation is complete, execute callback if there is any\n\n        if (options.onComplete && typeof options.onComplete === 'function') {\n          options.onComplete();\n        }\n      }\n    }; // Start animating scroll\n\n\n    requestID = requestAnimationFrame(step);\n  }\n\n  if (typeof exports !== 'undefined') {\n    if (typeof module !== 'undefined' && module.exports) {\n      module.exports = __ANIMATE_SCROLL_TO;\n      exports = module.exports;\n    }\n\n    exports.default = __ANIMATE_SCROLL_TO;\n  } else if (window) {\n    window.animateScrollTo = __ANIMATE_SCROLL_TO;\n  }\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}